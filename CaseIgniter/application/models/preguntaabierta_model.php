<?php
/**
* Model code autogenerated by CASE IGNITER
*/
class preguntaabierta_model extends CI_Model {


	/**
	* create MODEL action autogenerated by CASE IGNITER
	*/
	public function create( $enunciado, $enunciadofacil, $versaabierta, $componepa, $respuestasra, $contienepa ) {

	$bean = R::dispense( 'preguntaabierta' );


	// Regular attribute
	$bean -> setMeta("buildcommand.unique" , array(array('enunciado')) );
	$bean -> enunciado = $enunciado;

	// Regular attribute
	$bean -> setMeta("buildcommand.unique" , array(array('enunciadofacil')) );
	$bean -> enunciadofacil = $enunciadofacil;

	// "many to one" attribute
	if ( $versaabierta != null && $versaabierta != 0) {
		$bean -> versaabierta = R::load('asignatura',$versaabierta);
	}
				
				
	// "many to one" attribute
	if ( $componepa != null && $componepa != 0) {
		$bean -> componepa = R::load('plantillaencuesta',$componepa);
	}
				
									
	// "one to many" attribute
	foreach ($respuestasra as $id) {
		$o2m = R::load('respuestaabierta', $id);
		$bean -> alias('respuestasra') ->ownRespuestaabiertaList[] = $o2m;
	}
				
				
	// "many to one" attribute
	if ( $contienepa != null && $contienepa != 0) {
		$bean -> contienepa = R::load('categoria',$contienepa);
	}
				
				
	R::store($bean);

	return $bean->id;
}


	/**
	* update MODEL action autogenerated by CASE IGNITER
	*/
	public function update( $id, $enunciado, $enunciadofacil, $versaabierta, $componepa, $respuestasra, $contienepa ) {

	$bean = R::load( 'preguntaabierta', $id );


	// Regular attribute
	$bean -> enunciado = $enunciado;

	// Regular attribute
	$bean -> enunciadofacil = $enunciadofacil;
	// "many to one" attribute
	if ( $versaabierta != null ) {
		$bean -> versaabierta = ( $versaabierta != 0 ? R::load('asignatura',$versaabierta) : null );
		R::store($bean);
	}

	// "many to one" attribute
	if ( $componepa != null ) {
		$bean -> componepa = ( $componepa != 0 ? R::load('plantillaencuesta',$componepa) : null );
		R::store($bean);
	}

				
	// "one to many" attribute (O2M)

	foreach ($bean->alias('respuestasra')->ownRespuestaabiertaList as $respuestasra_bean ) {
		$key = array_search( $respuestasra_bean->respuestasra->id, $respuestasra );
		
		if ($key !== false) { // O2M we keep only the keys to add
			unset($respuestasra[$key]);
		}
		else { // O2M Element to be deleted
			R::store($bean);
			$respuestasra_bean -> respuestasra = null;
			R::store($respuestasra_bean);
		}
	}

	// O2M Elements to be added
	foreach ($respuestasra as $idf) {
		$o2m = R::load('respuestaabierta', $idf);
		$o2m -> respuestasra = $bean;
		R::store($o2m);
	}

	// "many to one" attribute
	if ( $contienepa != null ) {
		$bean -> contienepa = ( $contienepa != 0 ? R::load('categoria',$contienepa) : null );
		R::store($bean);
	}


	R::store($bean);
}


	/**
	* get_all MODEL action autogenerated by CASE IGNITER
	*/
	public function get_all() {
		return R::findAll('preguntaabierta');
	}

	/**
	* get_filtered MODEL action autogenerated by CASE IGNITER
	*/
	public function get_filtered($filter) {

		$where_clause[] = 'enunciado LIKE ?';
		$where_clause[] = 'enunciadofacil LIKE ?';
		$where_clause[] = '(SELECT nombre FROM asignatura WHERE asignatura.id = preguntaabierta.id) LIKE ?';
		$where_clause[] = '(SELECT nombre FROM plantillaencuesta WHERE plantillaencuesta.id = preguntaabierta.id) LIKE ?';
		$where_clause[] = '(SELECT texto FROM respuestaabierta WHERE respuestaabierta.id = preguntaabierta.id) LIKE ?';
		$where_clause[] = '(SELECT nombre FROM categoria WHERE categoria.id = preguntaabierta.id) LIKE ?';
		$f = "%$filter%";
		
		return R::findAll('ies', implode(' OR ', $where_clause) , [ $f,$f,$f,$f,$f,$f ] );
		
	}

	/**
	* delete MODEL action autogenerated by CASEIGNITER
	*/
	public function delete( $id ) {
		$bean = R::load('preguntaabierta', $id );
		R::trash( $bean );
	}
	
	/**
	* get_by_id MODEL action autogenerated by CASEIGNITER
	*/
	public function get_by_id( $id ) {
		return R::load('preguntaabierta', $id ) ;
	}
	
}
?>